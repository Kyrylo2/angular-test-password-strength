{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PasswordStrengthComponent = class PasswordStrengthComponent {\n  constructor() {\n    this.password = '';\n    this.hidePassword = true;\n    this.passwordStrength = 0;\n  }\n  calculateStrength() {\n    // No need to perform calculations here, the strength is determined by CSS classes\n  }\n  togglePasswordVisibility() {\n    this.hidePassword = !this.hidePassword;\n  }\n  getPasswordStrengthPercentage() {\n    if (!this.password) {\n      this.passwordStrength = 0;\n    }\n    // Use regular expressions to check the password for letters, digits, and symbols\n    const hasLetters = /[a-zA-Z]/.test(this.password);\n    const hasDigits = /\\d/.test(this.password);\n    const hasSymbols = /[!@#$%^&*()_+{}[\\]:;<>,.?~\\\\/\\-|=]/.test(this.password);\n    if (hasLetters && hasDigits && hasSymbols) {\n      // Strong password: has letters, digits, and symbols\n      this.passwordStrength = 100;\n    } else if (hasLetters && hasDigits || hasLetters && hasSymbols || hasDigits && hasSymbols) {\n      // Medium password: combination of letters-digits, letters-symbols, or digits-symbols\n      this.passwordStrength = 66;\n    } else {\n      // Easy password: only letters, digits, or symbols\n      this.passwordStrength = 33;\n    }\n  }\n  // getPasswordStrengthPercentage() {\n  //   if (!this.password) {\n  //     return 0;\n  //   } else if (this.password.length < 8) {\n  //     return 33;\n  //   } else if (this.password.length >= 8 && this.password.length < 12) {\n  //     return 66;\n  //   } else {\n  //     return 100;\n  //   }\n  // }\n  getProgressBarColor() {\n    if (this.getPasswordStrengthPercentage() === 100) {\n      return 'green';\n    } else if (this.getPasswordStrengthPercentage() >= 66) {\n      return 'yellow';\n    } else {\n      return 'red';\n    }\n  }\n  getProgressBarClass() {\n    if (!this.password) {\n      return 'lightgrey-progress';\n    } else if (this.getPasswordStrengthPercentage() === 100) {\n      return 'green-progress';\n    } else if (this.getPasswordStrengthPercentage() >= 66) {\n      return 'yellow-progress';\n    } else {\n      return 'red-progress';\n    }\n  }\n};\nPasswordStrengthComponent = __decorate([Component({\n  selector: 'app-password-strength',\n  templateUrl: './password-strength.component.html',\n  styleUrls: ['./password-strength.component.css']\n})], PasswordStrengthComponent);","map":{"version":3,"names":["Component","PasswordStrengthComponent","constructor","password","hidePassword","passwordStrength","calculateStrength","togglePasswordVisibility","getPasswordStrengthPercentage","hasLetters","test","hasDigits","hasSymbols","getProgressBarColor","getProgressBarClass","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/kyrylosavchenko/Programming/GitHub/angular-test-password-strength/src/app/password-strength/password-strength.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-password-strength',\n  templateUrl: './password-strength.component.html',\n  styleUrls: ['./password-strength.component.css'],\n})\nexport class PasswordStrengthComponent {\n  password: string = '';\n  hidePassword: boolean = true;\n  passwordStrength: number = 0;\n\n  calculateStrength() {\n    // No need to perform calculations here, the strength is determined by CSS classes\n  }\n\n  togglePasswordVisibility() {\n    this.hidePassword = !this.hidePassword;\n  }\n\n  getPasswordStrengthPercentage() {\n    if (!this.password) {\n      this.passwordStrength = 0;\n    }\n\n    // Use regular expressions to check the password for letters, digits, and symbols\n    const hasLetters = /[a-zA-Z]/.test(this.password);\n    const hasDigits = /\\d/.test(this.password);\n    const hasSymbols = /[!@#$%^&*()_+{}[\\]:;<>,.?~\\\\/\\-|=]/.test(this.password);\n\n    if (hasLetters && hasDigits && hasSymbols) {\n      // Strong password: has letters, digits, and symbols\n      this.passwordStrength = 100;\n    } else if (\n      (hasLetters && hasDigits) ||\n      (hasLetters && hasSymbols) ||\n      (hasDigits && hasSymbols)\n    ) {\n      // Medium password: combination of letters-digits, letters-symbols, or digits-symbols\n      this.passwordStrength = 66;\n    } else {\n      // Easy password: only letters, digits, or symbols\n      this.passwordStrength = 33;\n    }\n  }\n\n  // getPasswordStrengthPercentage() {\n  //   if (!this.password) {\n  //     return 0;\n  //   } else if (this.password.length < 8) {\n  //     return 33;\n  //   } else if (this.password.length >= 8 && this.password.length < 12) {\n  //     return 66;\n  //   } else {\n  //     return 100;\n  //   }\n  // }\n\n  getProgressBarColor() {\n    if (this.getPasswordStrengthPercentage() === 100) {\n      return 'green';\n    } else if (this.getPasswordStrengthPercentage() >= 66) {\n      return 'yellow';\n    } else {\n      return 'red';\n    }\n  }\n\n  getProgressBarClass() {\n    if (!this.password) {\n      return 'lightgrey-progress';\n    } else if (this.getPasswordStrengthPercentage() === 100) {\n      return 'green-progress';\n    } else if (this.getPasswordStrengthPercentage() >= 66) {\n      return 'yellow-progress';\n    } else {\n      return 'red-progress';\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,WAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAA/BC,YAAA;IACL,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,YAAY,GAAY,IAAI;IAC5B,KAAAC,gBAAgB,GAAW,CAAC;EAqE9B;EAnEEC,iBAAiBA,CAAA;IACf;EAAA;EAGFC,wBAAwBA,CAAA;IACtB,IAAI,CAACH,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EAEAI,6BAA6BA,CAAA;IAC3B,IAAI,CAAC,IAAI,CAACL,QAAQ,EAAE;MAClB,IAAI,CAACE,gBAAgB,GAAG,CAAC;;IAG3B;IACA,MAAMI,UAAU,GAAG,UAAU,CAACC,IAAI,CAAC,IAAI,CAACP,QAAQ,CAAC;IACjD,MAAMQ,SAAS,GAAG,IAAI,CAACD,IAAI,CAAC,IAAI,CAACP,QAAQ,CAAC;IAC1C,MAAMS,UAAU,GAAG,oCAAoC,CAACF,IAAI,CAAC,IAAI,CAACP,QAAQ,CAAC;IAE3E,IAAIM,UAAU,IAAIE,SAAS,IAAIC,UAAU,EAAE;MACzC;MACA,IAAI,CAACP,gBAAgB,GAAG,GAAG;KAC5B,MAAM,IACJI,UAAU,IAAIE,SAAS,IACvBF,UAAU,IAAIG,UAAW,IACzBD,SAAS,IAAIC,UAAW,EACzB;MACA;MACA,IAAI,CAACP,gBAAgB,GAAG,EAAE;KAC3B,MAAM;MACL;MACA,IAAI,CAACA,gBAAgB,GAAG,EAAE;;EAE9B;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAQ,mBAAmBA,CAAA;IACjB,IAAI,IAAI,CAACL,6BAA6B,EAAE,KAAK,GAAG,EAAE;MAChD,OAAO,OAAO;KACf,MAAM,IAAI,IAAI,CAACA,6BAA6B,EAAE,IAAI,EAAE,EAAE;MACrD,OAAO,QAAQ;KAChB,MAAM;MACL,OAAO,KAAK;;EAEhB;EAEAM,mBAAmBA,CAAA;IACjB,IAAI,CAAC,IAAI,CAACX,QAAQ,EAAE;MAClB,OAAO,oBAAoB;KAC5B,MAAM,IAAI,IAAI,CAACK,6BAA6B,EAAE,KAAK,GAAG,EAAE;MACvD,OAAO,gBAAgB;KACxB,MAAM,IAAI,IAAI,CAACA,6BAA6B,EAAE,IAAI,EAAE,EAAE;MACrD,OAAO,iBAAiB;KACzB,MAAM;MACL,OAAO,cAAc;;EAEzB;CACD;AAxEYP,yBAAyB,GAAAc,UAAA,EALrCf,SAAS,CAAC;EACTgB,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,C,EACWjB,yBAAyB,CAwErC"},"metadata":{},"sourceType":"module","externalDependencies":[]}